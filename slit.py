# -*- coding: utf-8 -*-
"""Slit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZV_RmDOuO-hBUgfy0karCWXZJ5v2Sgzc
"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import datasets
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score


# User defined plotting function
def plot_svc_decision_function(model, ax=None, plot_support=True):
    """Plot the decision function for a 2D SVC"""
    if ax is None:
      ax = plt.gca()
    xlim = ax.get_xlim()
    ylim = ax.get_ylim()

    # create grid to evaluate model
    x = np.linspace(xlim[0], xlim[1], 30)
    y = np.linspace(ylim[0], ylim[1], 30)
    Y, X = np.meshgrid(y, x)
    xy = np.vstack([X.ravel(), Y.ravel()]).T
    P = model.decision_function(xy).reshape(X.shape)

    # plot decision boundary and margins
    ax.contour(X, Y, P, colors='k',
    levels=[-1, 0, 1], alpha=0.5,
    linestyles=['--', '-', '--'])

    # plot support vectors
    if plot_support:
      ax.scatter(model.support_vectors_[:, 0],
      model.support_vectors_[:, 1],
      s=300, linewidth=1, facecolors='none')
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)

data = pd.read_csv('User_Data.csv')
print("Dataset Loaded Successfully!")

#Information about the dataset of usercvs
print("\nDataset Information:\n")
print(data.info())
print("\nDataset Description:\n")
print(data.describe())
sns.pairplot(data, hue='Purchased')
plt.show()

encoder = LabelEncoder()
data['Gender'] = encoder.fit_transform(data['Gender'])  # Convert Male/Female to 0/1

# now i'll split features and label columns
X = data[['Gender', 'Age', 'EstimatedSalary']]
y = data['Purchased']

# scaleing the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# now doing train testt split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)
X_train.shape

print("Shape of X array: ",X.shape)
print("Shape of y array: ",y.shape)

model = SVC(kernel='linear')
model.fit(X, y)
y_pred = model.predict(X)
print("Accuracy score: ", accuracy_score(y, y_pred))
print("Precision Score: ",precision_score(y, y_pred))
print("F1 score: ", f1_score(y, y_pred))
print("Recall score: ",recall_score(y, y_pred))
ConfusionMatrixDisplay.from_predictions(y, y_pred);

model = SVC(kernel='poly', degree=2) # Try other values of degree
model.fit(X, y)
y_pred = model.predict(X)
print("Accuracy score: ", accuracy_score(y, y_pred))
print("Precision Score: ",precision_score(y, y_pred))
print("F1 score: ", f1_score(y, y_pred))
print("Recall score: ",recall_score(y, y_pred))
ConfusionMatrixDisplay.from_predictions(y, y_pred);

model = SVC(kernel='rbf', gamma=50)
model.fit(X, y)
y_pred = model.predict(X)
print("Accuracy score: ", accuracy_score(y, y_pred))
print("Precision Score: ",precision_score(y, y_pred))
print("F1 score: ", f1_score(y, y_pred))
print("Recall score: ",recall_score(y, y_pred))
ConfusionMatrixDisplay.from_predictions(y, y_pred);